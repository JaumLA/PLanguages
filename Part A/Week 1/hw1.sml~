(* A date is represented as a tuple (int*int*int) where
     the first element represent the year, second the 
     month and the third the day. *)

(* Evaluate true only if the first date comes before the second *)
fun is_older (d1 : int*int*int, d2 : int*int*int) =
    let
	val year1 = #1 d1
	val month1 = #2 d1
	val day1 = #3 d1
	val year2 = #1 d2
	val month2 = #2 d2
	val day2 = #3 d2
    in
	if year1 = year2
	then if month1 = month2
	     then  day1 < day2         
	     else month1 < month2	  
	else year1 < year2
    end
	
(* Take a list of dates and return how many dates 
   are in the given month. *)
fun number_in_month (lod : (int*int*int) list, month : int) =
    if null lod
    then 0
    else let val anws = number_in_month(tl(lod), month)
	 in
	     if #2 (hd(lod)) = month
             then 1 + anws
             else anws
	 end

(* Take a list of dates and return how many dates are 
   in the given list of months. *)			     
fun number_in_months (lod : (int*int*int) list, lom : int list) =
    if null lom
    then 0
    else number_in_month(lod, hd(lom)) + number_in_months(lod, tl(lom))

(* Take a list of dates and return a list of dates 
   that are in the given month. *)
fun dates_in_month (lod : (int*int*int) list, month : int) =
    if null lod
    then []
    else
	let
	    val date = hd(lod)
	    val anws = dates_in_month(tl(lod), month)
	 in
	     if #2 date = month
	     then date :: anws
	     else anws
	 end

(* Take a list of dates and return a list of dates 
   that are in the given list of months. *)
fun dates_in_months (lod : (int*int*int) list, lom : int list) =
    if null lom
    then []
    else dates_in_month(lod, hd(lom)) @ dates_in_months(lod, tl(lom))

(* Return the n-th element of a list of strings. *)
fun get_nth (los : string list, pos : int) =
    if pos = 1
    then hd(los)
    else get_nth(tl(los), pos-1)

(* Format the given date to a string, e.g. "January 15, 1999". *)		
fun date_to_string (d : (int*int*int)) =
    let
	val months = ["January", "February", "March", "April", "May", "June",
		      "July", "August","September", "October", "November","December"]
	val d_day = Int.toString(#3 d)
	val d_month = #2 d
	val d_year = Int.toString(#1 d)
    in
	get_nth(months,d_month)^" "^d_day^", "^d_year
    end


(* Return the first n number of the list that add less than sum. *)
fun number_before_reaching_sum (sum : int, loi : int list) =
    if sum <= hd(loi)
    then 0
    else 1 + number_before_reaching_sum(sum-(hd(loi)), tl(loi))

(* Take a day (an int between 1 and 365) and return the month 
   that day is in. *)				       
fun what_month (day : int) =
    let val days_in_month = [31,28,31,30,31,30,31,31,30,31,30,31]
    in
	number_before_reaching_sum(day, days_in_month) + 1
    end

(* Takes two days of the year day1 and day2 and returns an int list
[m1,m2,...,mn] where m1 is the month of day1, m2 is the month of day1+1, ..., and 
mn is the month of day day2. *)	
fun month_range (day1 : int, day2 : int) =
    if day1 > day2
    then []
    else what_month(day1) :: month_range(day1 + 1,day2)
	
(* Take a list of dates and return the oldest date in the list. *)
fun oldest (lod : (int*int*int) list) =
    if null lod
    then NONE
    else
	let
	    fun oldest_nonempty (lod : (int*int*int) list, d : (int*int*int)) =
		if null lod
		then SOME d
		else if is_older(d, hd(lod))
		     then oldest_nonempty(tl(lod), d)
		     else oldest_nonempty(tl(lod), hd(lod))
				    
	    val first_date = hd(lod)
	in
	    oldest_nonempty(lod,first_date)
	end

(* Helper functions for challenge problems 11. *)
fun remove (loi : int list, num : int) = 
    if null loi
    then []
    else if hd(loi) = num
         then remove(tl(loi), num)
         else hd(loi) :: (remove(tl(loi), num))
				   
fun create_unique_list (loi : int list) =
    let
	val answ = remove(tl(loi), hd(loi))
    in
	if null answ
	then [hd(loi)]
	else hd(loi) :: create_unique_list(answ)
    end
(* End of the helper functions. *)
	
(* Take a list of dates and return how many dates are
   in the given list of months. *)			     
fun number_in_months_challenge (lod : (int*int*int) list, lom : int list) =
    if null lom
    then 0
    else let val unique_lom = create_unique_list(lom)
	 in
	     number_in_months(lod, unique_lom)
	 end

(* Take a list of dates and return a list of dates 
   that are in the given list of months. *)
fun dates_in_months_challenge (lod : (int*int*int) list, lom : int list) =
    if null lom
    then []
    else let val unique_lom = create_unique_list(lom)
	 in
	     dates_in_months(lod, unique_lom)
	 end

(* Return true if the given date is reasonable. A reasonable date has a positive 
   year, a month between 1 and 12 and a day between 1 and 31. Leap years are allowed. *)
fun reasonable_date (date : (int*int*int)) =
    let
	val year = #1 date
	val month = #2 date
	val day = #3 date
		     
	fun is_leap () =
	    year mod 100 <> 0 andalso
	   (year mod 4 = 0 orelse year mod 400 = 0)
		
	fun reasonable_year () =
	    year > 0
			    
	fun reasonable_month () =
	    month >= 1 andalso month <= 12

	fun reasonable_day () =
	    if month = 2
	    then if is_leap()
		 then day >= 1 andalso day <= 29
		 else day >= 1 andalso (day <= 28)
	    else let
		    val months_with_31 = [1,3,5,7,8,10,12]
					 
		    fun is_31_month (lom : int list) =
		         let val is_31 = (month = hd(lom))
			 in
			     if null (tl(lom)) orelse is_31
			     then is_31
			     else is_31_month(tl(lom))
			 end
	          in
		      if is_31_month(months_with_31)
		      then (day >= 1 andalso day <= 31)
		      else (day >= 1 andalso day <= 30)
	          end
    in
	reasonable_year() andalso (reasonable_month() andalso reasonable_day())
    end

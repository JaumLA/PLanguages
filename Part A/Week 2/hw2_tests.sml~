use "hw2.sml";

val test_all_except_option_1 = all_except_option ([], "asd") = NONE
val test_all_except_option_2 = all_except_option (["asd"], "asd") = SOME []
val test_all_except_option_3 = all_except_option (["asd", "ldsfo", "asde"], "asd") = SOME ["ldsfo", "asde"]
val test_all_except_option_4 = all_except_option (["dew", "ldsfo", "asde"] ,"asd") = NONE
val test_all_except_option_5 = all_except_option (["","","asd"] ,"asd") = SOME ["", ""]

val test_get_substitutions1_1 = get_substitutions1 ([["foo"],["there"]], "foo") = []
val test_get_substitutions1_2 = get_substitutions1 ([["asd"], ["dds"], ["","sd"]], "45") = []
val test_get_substitutions1_3 = get_substitutions1 ([["asd", ""], [""], ["","sd"]], "") = ["asd","sd"]
val test_get_substitutions1_4 = get_substitutions1 ([["asd", "", "dfge"], ["dds"], ["","sd"]], "") = ["asd","dfge","sd"]
val test_get_substitutions1_5 = get_substitutions1 ([["asd", ""], ["dds"], ["","sd"]], "") = ["asd","sd"]
												 
val test_get_substitutions2_1 = get_substitutions2 ([["foo"],["there"]], "foo") = []
val test_get_substitutions2_2 = get_substitutions2 ([["asd"], ["dds"], ["","sd"]], "45") = []
val test_get_substitutions2_3 = get_substitutions2 ([["asd", ""], [""], ["","sd"]], "") = ["asd","sd"]
val test_get_substitutions2_4 = get_substitutions2 ([["asd", "", "dfge"], ["dds"], ["","sd"]], "") = ["asd","dfge","sd"]
val test_get_substitutions2_5 = get_substitutions2 ([["asd", ""], ["dds"], ["","sd"]], "") = ["asd","sd"]

val test_similar_names_1 = similar_names ([["Fred","Fredrick"],["Elizabeth","Betty"],["Freddie","Fred","F"]], {first="Fred", middle="W", last="Smith"}) =
	    [{first="Fred", last="Smith", middle="W"}, {first="Fredrick", last="Smith", middle="W"},
	     {first="Freddie", last="Smith", middle="W"}, {first="F", last="Smith", middle="W"}]
val test_similar_names_2 = similar_names ([["Fred"],["Elizabeth","Betty"],["Fred"]], {first="Fred", middle="W", last="Smith"}) = [{first="Fred", last="Smith", middle="W"}]
val test_similar_names_3 = similar_names ([[],[],[]], {first="Fred", middle="W", last="Smith"}) = [{first="Fred", middle="W", last="Smith"}]

val test_card_color_1 = card_color (Clubs, Ace) = Black
val test_card_color_2 = card_color (Spades, Jack) = Black
val test_card_color_3 = card_color (Diamonds, King) = Red
val test_card_color_4 = card_color (Hearts, Queen) = Red
val test_card_color_5 = card_color (Clubs, Num 2) = Black
							 
val test_card_value_1 = card_value (Clubs, Ace) = 11
val test_card_value_2 = card_value (Spades, Num 5) = 5
val test_card_value_3 = card_value (Diamonds, Num 10) = 10
val test_card_value_4 = card_value (Clubs, King) = 10
val test_card_value_5 = card_value (Clubs, Num 2) = 2

val test_remove_card_1 = remove_card ([(Hearts, Ace)], (Hearts, Ace), IllegalMove) = []
val test_remove_card_2 = remove_card ([(Hearts, Ace)], (Hearts, Ace), IllegalMove) = []
val test_remove_card_3 = (remove_card ([(Clubs, Num 2)], (Clubs, King), IllegalMove)
			 handle IllegalMove => []) = []
val test_remove_card_4 = remove_card ([(Clubs, Num 2), (Clubs, King), (Clubs, King)], (Clubs, King), IllegalMove)
 			 = [(Clubs, Num 2), (Clubs, King)]

val test_all_same_color_1 = all_same_color [] = true
val test_all_same_color_2 = all_same_color [(Hearts, Ace), (Hearts, Ace)] = true
val test_all_same_color_3 = all_same_color [(Hearts, Ace), (Clubs, Ace)] = false
val test_all_same_color_4 = all_same_color [(Hearts, Ace), (Hearts, Num 8)] = true
val test_all_same_color_5 = all_same_color [(Hearts, Ace), (Hearts, Num 5), ((Hearts, Ace))] = true	
val test_all_same_color_6 = all_same_color [(Hearts, Num 3), (Hearts, Num 5), (Clubs, Ace)] = false

val test_sum_cards_1 = sum_cards ([]) = 0
val test_sum_cards_2 = sum_cards ([(Hearts, Ace)]) = 11
val test_sum_cards_3 = sum_cards ([(Hearts, Ace), (Clubs, Ace)]) = 22
val test_sum_cards_4 = sum_cards ([(Hearts, Num 3), (Hearts, Num 5), (Clubs, Ace)]) = 19
val test_sum_cards_5 = sum_cards ([(Hearts, Num 3), (Hearts, Num 5), (Clubs, King)]) = 18
val test_sum_cards_6 = sum_cards ([(Hearts, Num 3), (Hearts, Num 5)]) = 8

val test_score_1 = score ([], 5) = 2
val test_score_2 = score ([], 0) = 0
val test_score_3 = score ([(Hearts, Ace)], 12) = ((12-11) div 2)
val test_score_4 = score ([(Hearts, Ace)], 0) = ((3*11) div 2)
val test_score_5 = score ([(Hearts, Ace), (Hearts, Num 5)], 5) = ((3*(11+5-5)) div 2)
val test_score_6 = score ([(Hearts, Ace), (Spades, Num 5)], 5) = ((3*(11+5-5)))
val test_score_7 = score ([(Hearts, Ace), (Spades, Num 5), (Spades, Num 3)], 5) = ((3*(11+5+3-5)))

val test_officiate_1 = officiate ([(Hearts, Num 2),(Clubs, Num 4)],[Draw], 15) = 6
val test_officiate_2 = officiate ([(Clubs,Ace),(Spades,Ace),(Clubs,Ace),(Spades,Ace)],
				  [Draw,Draw,Draw,Draw,Draw],
				  42) = 3
val test_officiate_3 = ((officiate([(Clubs,Jack),(Spades,Num(8))],
				   [Draw,Discard(Hearts,Jack)],
				   42); false) handle IllegalMove => true)

val test_score_challenge_1 = score_challenge([(Hearts, Ace), (Spades, Num 5)], 11)
val test_score_challenge_2 = score_challenge([(Hearts, Ace), (Spades, Num 5)], 11)
val test_score_challenge_3 = score_challenge([(Hearts, Ace), (Spades, Num 5)], 11)
val test_score_challenge_4 = score_challenge([(Hearts, Ace), (Spades, Num 5)], 11)
val test_score_challenge_5 = score_challenge([(Hearts, Ace), (Spades, Num 5)], 11)

val test_careful_player_1 = careful_player([(Spades,Num 7),(Hearts,King),(Clubs,Ace),(Diamonds,Num 2)], 18)
val test_careful_player_2 = careful_player([], 0)
